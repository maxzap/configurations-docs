Configuraciones Basicas Ubuntu
JDK

Versiones de java disponibles
update-java-alternatives --list


Instalar la ultima version disponible
sudo apt install default-jdk

Intalar una version especifica
sudo apt install openjdk-8-jdk

switch entre versiones de jre
sudo update-alternatives --config java

switch entre versiones de jdk
sudo update-alternatives --config javac 

Seteamos la variable de entorno
sudo nano /etc/environment
JAVA_HOME="/usr/lib/jvm/java-11-openjdk-amd64/bin/"

para que tome los cambios en la terminal en la que estamos
source /etc/environment 

validar la variable de entorno
echo $JAVA_HOME


setear un bash minimalista

  sudo snap install starship 
  gedit .bashrc 

agregar la siguiente linea al final del archivo
  eval "$(starship init bash)"

modificar el tema de la terminal
	sudo apt-get install dconf-cli
	sudo apt install git
	git clone https://github.com/dracula/gnome-terminal
	cd gnome-terminal
	./install.sh

MOdificar gedit
	wget https://raw.githubusercontent.com/dracula/gedit/master/dracula.xml
	Move the file to gedit style's folder:
	mv dracula.xml $HOME/.local/share/gedit/styles/
	Activate in Gedit's preferences dialog

Cambiar modo de inicio
	sudo gedit /etc/default/grub
	GRUB_TIMEOUT_STYLE=MENU
	GRUB_TIMEOUT=2
	sudo update-grub

Configurar github
	git config --global user.name "Maximiliano Zapata"
  git config --global user.email "maxzap@gmail.com"
	ls -al ~/.ssh (lista los archivos ssh)
	ssh-keygen -t ed25519 -C "maxzap@gmail.com" (genera un ssh)
	eval "$(ssh-agent -s)"
	ssh-add ~/.ssh/id_ed25519 (guarda la parafrase en el agente de ssh)
	cat ~/.ssh/id_ed25519.pub (editamos el .pub, copiamos el contenido y lo guardo en github)
	***** asegurate de clonar un repo con ssh *****

Configuracion Docker https://docs.docker.com/desktop/install/ubuntu/
	Install Docker Desktop
	Recommended approach to install Docker Desktop on Ubuntu:

	1 - Set up Docker’s package repository.

	2 - Download latest DEB package.

	3 - Install the package with apt as follows:


	1 - Set up the repository

		Update the apt package index and install packages to allow apt to use a repository over HTTPS:
			 sudo apt-get update
			 sudo apt-get install \
			    ca-certificates \
			    curl \
			    gnupg \
			    lsb-release

		Add Docker’s official GPG key:
			 sudo mkdir -p /etc/apt/keyrings
			 curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg

		Use the following command to set up the repository:
			 echo \
			  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
			  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
			Install Docker Engine

		Update the apt package index, and install the latest version of Docker Engine, containerd, and Docker Compose, or go to the next step to install a specific version:
			 sudo apt-get update
			 sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin

		Verify that Docker Engine is installed correctly by running the hello-world image.
			 sudo service docker start
			 sudo docker run hello-world
	2 - Download latest DEB package. (DOWNLOADING)
	3 - Install the package with apt as follows:
		sudo apt-get update
		sudo apt-get install ./docker-desktop-<version>-<arch>.deb
		
Instalar entorno kb8 (https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/)
	Download the latest release with the command:
		curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
	Validate the binary (optional)
		Download the kubectl checksum file:
			curl -LO "https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
		Validate the kubectl binary against the checksum file:
			echo "$(cat kubectl.sha256)  kubectl" | sha256sum --check
				If valid, the output is:
					kubectl: OK
				If the check fails, sha256 exits with nonzero status and prints output similar to:
					kubectl: FAILED
					sha256sum: WARNING: 1 computed checksum did NOT match

			Note: Download the same version of the binary and checksum.
	Install kubectl
		sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
		
		***
		note: If you do not have root access on the target system, you can still install kubectl to the ~/.local/bin directory:
			chmod +x kubectl
			mkdir -p ~/.local/bin
			mv ./kubectl ~/.local/bin/kubectl
			# and then append (or prepend) ~/.local/bin to $PATH
		***
	Test to ensure the version you installed is up-to-date:
		kubectl version --client
	Or use this for detailed view of version:
		kubectl version --client --output=yaml    
		
